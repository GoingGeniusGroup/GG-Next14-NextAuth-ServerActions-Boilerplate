import { getUserAvatars } from "@/actions/genius-profile/avatar";
import { currentUser } from "@/lib/auth";
import {
  AvatarProvider,
  AvatarType,
} from "@/src/components/comp/AvatarManager/provider/AvatarManagerContext";
import FloatingDockInvertedComponent from "@/src/components/comp/dock/FloatingDockInverted";
import { MobileSimulatorProvider } from "@/src/components/comp/MobileSimulator/provider/MobileSimulatorContext";
import { ThemeSwitcher } from "@/src/components/comp/ThemeToggler/ThemeSwitcher";
import { UserProvider } from "@/src/hooks/UserProvider";
import Providers from "@/src/providers/SessionProvider";
import { AuroraBackground } from "@/src/ui/background/aurora-background";
import { Toaster } from "@/src/ui/sonner";
import "@/styles/globals.css";
import { SpeedInsights } from "@vercel/speed-insights/next";
import type { Metadata } from "next";
import { ThemeProvider } from "next-themes";
import { Inter } from "next/font/google";
import { ToastProvider } from "../src/providers/toast-provider";
import FullscreenButton from "@/src/ui/button/fullscreen-button";

import { songs } from "../data/songs";
import { MusicPlayerProvider } from "@/src/context/music-player-context";
import MusicPlayerMinimized from "@/src/components/music-player/music-player-component-minimized";
import SongListToggleClient from "@/src/components/music-player/song-list-toggle-client";

import { TooltipProvider } from "@/src/ui/tooltip/tooltip";

import { signOut } from "@/auth";
import { revalidatePath } from "next/cache";
import ProfileHudTop from "@/src/components/comp/Huds/ProfileHudTop";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: {
    default: "Next Dashboard ",
    template: "Next Dashboard",
  },
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const user = await currentUser();

  async function handleServerSignOut() {
    "use server";

    try {
      await signOut({ redirect: false });
      revalidatePath("/");
      return { success: true };
    } catch (error) {
      console.error("Server logout error:", error);
      return { success: false, error: "Failed to logout" };
    }
  }

  if (!user) {
    return (
      <>
        <html lang="en" className="h-full">
          <body className={inter.className}>
            <Toaster position="bottom-left" richColors theme="light" />
            <Providers>
              <TooltipProvider>
                <MusicPlayerProvider songs={songs}>
                  <MobileSimulatorProvider>
                    <ThemeProvider
                      attribute="class"
                      defaultTheme="system"
                      enableSystem
                    >
                      <AuroraBackground>
                        <UserProvider>
                          {/* Theme switcher */}
                          <div className="absolute top-[8px] right-7 z-50">
                            <ThemeSwitcher />
                          </div>

                          {/* Music Player */}
                          <div className="absolute bottom-6 left-6 z-50 w-[400px] flex">
                            {/* <MusicPlayer /> */}
                            <MusicPlayerMinimized />
                          </div>
                          <div className="fixed right-6 bottom-6 z-50">
                            <SongListToggleClient songs={songs} />
                          </div>

                          {/* Dock section */}
                          <div className="w-full z-40">
                            <div className="p-4 text-black dark:text-white">
                              <FloatingDockInvertedComponent />
                            </div>
                          </div>

                          {/* Content section */}
                          <div className="flex-1 px-8 py-4 w-full overflow-auto">
                            {children}
                            <SpeedInsights />
                          </div>
                        </UserProvider>
                        <ToastProvider />
                      </AuroraBackground>
                    </ThemeProvider>
                  </MobileSimulatorProvider>
                </MusicPlayerProvider>
              </TooltipProvider>
            </Providers>
          </body>
        </html>
      </>
    );
  }

  const avatarsResponse = await getUserAvatars(user.gg_id);
  const avatars: AvatarType[] =
    avatarsResponse.success && Array.isArray(avatarsResponse.data)
      ? avatarsResponse.data
      : [];

  return (
    <html lang="en" className="h-full">
      <body className={inter.className}>
        <Toaster position="bottom-left" richColors theme="light" />
        <Providers>
          <MusicPlayerProvider songs={songs}>
            <MobileSimulatorProvider>
              <ThemeProvider
                attribute="class"
                defaultTheme="system"
                enableSystem
              >
                <AuroraBackground>
                  <UserProvider>
                    <AvatarProvider initialAvatars={avatars} user={user.gg_id}>
                      {/* Theme switcher */}
                      <div className="absolute flex gap-2 top-[8px] right-7 z-50">
                        <ThemeSwitcher />
                        <ProfileHudTop
                          handleServerSignOut={handleServerSignOut}
                        />
                      </div>

                      {/* Music Player */}
                      <div className="absolute bottom-6 left-6 z-50 w-[400px] flex">
                        {/* <MusicPlayer /> */}
                        <MusicPlayerMinimized />
                      </div>
                      <div className="fixed right-6 bottom-6 z-50">
                        <SongListToggleClient songs={songs} />
                      </div>

                      {/* Dock section */}
                      <div className="w-full z-40">
                        <div className="p-4 text-black dark:text-white">
                          <FloatingDockInvertedComponent />
                        </div>
                      </div>

                      {/* Content section */}
                      <div className="flex-1 px-8 py-4 w-full overflow-auto">
                        {children}
                        <SpeedInsights />
                      </div>
                      <FullscreenButton />
                    </AvatarProvider>
                  </UserProvider>
                  <ToastProvider />
                </AuroraBackground>
              </ThemeProvider>
            </MobileSimulatorProvider>
          </MusicPlayerProvider>
        </Providers>
      </body>
    </html>
  );
}
