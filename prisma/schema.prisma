// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  Admin
  User
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  phone                 String?
  dob                   DateTime?
  emailVerified         DateTime?
  image                 String? // You can use gravatar.com to get image profile
  password              String?
  role                  UserRole               @default(User)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Cart                  Cart[]
  Order                 Order[]
  UserPaymentMethod     UserPaymentMethod[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProductStatus {
  AVAILABLE
  NOTAVAILABLE
}

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  image           String?
  costPrice       Float
  quantityInStock Int
  validity        String?
  discount        Float?
  salePrice       Float?
  margin          String?
  status          Boolean  @default(true)
  isFeatured      Boolean? @default(false)
  slug            String?

  inventory Inventory?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  suppliers Supplier[]
  orders    Order[]          @relation("ProductOrders")
  carts     Cart[]
  Variants  ProductVariant[]
  Tax       Tax?             @relation(fields: [taxId], references: [id])
  taxId     String?
}

enum CartStatus {
  PENDING
  CHECKOUT
}

model Cart {
  id String @id @default(cuid())

  quantity Int
  status   CartStatus @default(PENDING)

  amount    Float?
  productId String
  product   Product @relation(fields: [productId], references: [id])

  userId String? // User ID for authenticated users
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id], name: "OrderCarts", onDelete: Cascade)

  variants ProductVariant[]
}

model ProductVariant {
  id        String         @id @default(uuid())
  var_id    String
  variant   Variant        @relation(fields: [var_id], references: [id])
  var_opt   String?
  option    VariantOption? @relation(fields: [var_opt], references: [id])
  productId String
  Product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  var_img         String?
  salePrice       Float
  stock           Int?
  status          Boolean @default(true)
  priceDifference Float?
  costPrice       Float?
  discount        String?

  carts Cart[]
}

//eg: size, color
model Variant {
  id   String @id @default(uuid())
  name String

  status         Boolean          @default(true)
  options        VariantOption[]
  ProductVariant ProductVariant[]
}

// Size ( variant) => [ md, lg, sm]
model VariantOption {
  id             String           @id @default(uuid())
  value          String
  var_id         String
  variant        Variant          @relation(fields: [var_id], references: [id])
  variantName    String?
  ProductVariant ProductVariant[]
}

model Category {
  id           String  @id @default(cuid())
  categoryName String
  description  String?

  products Product[]
}

model Inventory {
  id          String   @id @default(cuid())
  status      String
  quantity    Int
  restockDate DateTime
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
}

model Supplier {
  id           String  @id @default(cuid())
  supplierName String
  email        String?
  phone        String?
  address      String?

  products Product[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id            String       @id @default(cuid())
  orderDate     DateTime     @default(now())
  quantity      Int
  deliveryDate  DateTime?
  amount        Float?
  streetAddress String
  state         String
  city          String
  status        OrderStatus  @default(PENDING)
  paymentStatus Boolean      @default(false)
  paymentId     String?
  paymentType   PaymentType? @relation(fields: [paymentId], references: [id])

  products Product[] @relation("ProductOrders")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  saleinvoice SalesInvoice?

  carts Cart[] @relation("OrderCarts")
}

model PaymentType {
  id          String @id @default(cuid())
  paymentType String

  UserPaymentMethod UserPaymentMethod[]
  Order             Order[]
}

model UserPaymentMethod {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  typeId         String
  type           PaymentType @relation(fields: [typeId], references: [id])
  provider       String?
  account_number String?
  expiry_date    DateTime?
  is_default     Boolean     @default(true)
}

model SalesInvoice {
  id          String   @id @default(cuid())
  invoiceDate DateTime @default(now())
  InvoiceId   String   @unique
  tax         Tax[]
  totalAmount Float?
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Tax {
  id          String  @id @default(cuid())
  name        String
  rate        Float
  description String?

  SalesInvoice SalesInvoice[]
  Product      Product[]
}
